Magesh Kuppan
    99019-11221
    tkmagesh77@gmail.com

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    End         : 5:30 PM

Methodolgy:
    100% Hands on
    No Powerpoints
    At least 50% of the participants should have completed the assignment in order for us to move forward.

Repository:
    https://github.com/tkmagesh/IBM-Go-Feb-2022-2

Software Requirements:
    Go Tools
        golang.org/dl

    Visual Studio Code
        https://code.visualstudio.com/

Why Go?
    1. Simplicity
        25 keywords
            a. No access modifiers
            b. No classes (only structs)
            c. No inheritance (only composition)
            d. No Exceptions (only errors)
            e. No pointer arithmetic
            f. No difference between "value" & "reference" types (everything is a value in go)
            g. No implicity type conversion
        Garbage Collector is included

    2. Performance
        Equivalent to C
        Compiled to native instruction set

    3. Concurrency
        Ability to have more than one "execution path"
        Language is built for concurrency
            go, select, range, channel (data type), <- (channel operator)
        SDK
            sync package
            sync/atomic package
            
Paradox of Choice
    Barry Schwartz

Data types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real[float32] + imaginary[float32])
    complex128 (real[float64] + imaginary[float64])

    byte (alias for uint8)
    rune (alias for int32)(unicode code point)(character)

assignment:1
    Write a program that will print all the prime numbers between 3 to 100

Assignment-2
Display the following menu 
    1. Add
    2. Subtract
    3. Multiply
    4. Divide
    5. Exit
If the user choice is 1 - 4, 
    accept 2 numbers 
    perform the operation
    print the result
    display the menu again
if the user choice is 5
    exit from the application
If the user enters any other choice 
    display "Invalid choice" 
    display the menu again.

Assignment:04
    Write a function that will return the count of prime numbers from the list of arguments.

Functions
    anonymous function
    Higher order functions (functions can be treated like data)
        1. assign functions to variables
        2. pass functions as arguments to other functions
        3. return functions from other functions
    Deferred functions


Collections
    Array
        fixed size typed collection of elements
    Slice
        Varying size typed collection of elements

    Map
        Typed collection of key/value pairs


Moduarity
    Modules & Packages

    Module file => go.mod
        name
        go runtime version
        dependencies

    A Module can have many packages
    Packages can be nested
    Packages are nothing but folders

    It is advicable to have the "The repo link for the module" as the name of the module
    github.com/tkmagesh/myApp


    TO get the go related environment variables 
        go env
        go env GOPATH


    Module commands
        To Create a module
            go mod init <module name>
            
        To install a 3rd party module
            go get <module name>
            ex:
                go get github.com/fatih/color

        To update the mod file with the latest version of the module
            go mod tidy

        To localize the dependencies 
            go mod vendor

        To know the usage of a module
            go mod why <module name>
            ex :
                go mod why github.com/fatih/color
                
        go mod command documentation
            https://go.dev/ref/mod

    To run the application
        go run .

    To create a build
        go build .
        go build -o <binary name> .
        
Assignment:08
    Create a product struct with the following fields
        Id
        Name
        Cost
        Units
        Category

    Write a Format function that will return a string representation of the product to print in the stdio

    Write a ApplyDiscount function to apply the discount to the cost of the product

Assignment:09
    Create a FulltimeEmployee type composing the Employee type
    FulltimeEmployee will have a "Benefits" field

Methods can be created in the same package where the struct is defined

Interfaces
    interfaces are implemented IMPLICITLY